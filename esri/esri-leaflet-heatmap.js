/* esri-leaflet-heatmap - v2.0.0 - Mon Aug 29 2016 20:03:56 GMT-0700 (PDT)
 * Copyright (c) 2016 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
(function(global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('leaflet'), require('esri-leaflet')) :
        typeof define === 'function' && define.amd ? define(['exports', 'leaflet', 'esri-leaflet'], factory) :
        (factory((global.L = global.L || {}, global.L.esri = global.L.esri || {}, global.L.esri.Heat = global.L.esri.Heat || {}), global.L, global.L.esri));
}(this, function(exports, L, esriLeaflet) {
    'use strict';

    L = 'default' in L ? L['default'] : L;

    var version = "2.0.0";

    var FeatureLayer = esriLeaflet.FeatureManager.extend({
        /**
         * Constructor
         */

        initialize: function(options) {
            esriLeaflet.FeatureManager.prototype.initialize.call(this, options);

            options = L.setOptions(this, options);

            this._cache = {};
            this._active = {};

            this.heat = window.L.heatLayer([], options);
        },

        /**
         * Layer Interface
         */

        onAdd: function(map) {
            esriLeaflet.FeatureManager.prototype.onAdd.call(this, map);
            this._map.addLayer(this.heat);
        },

        onRemove: function(map) {
            esriLeaflet.FeatureManager.prototype.onRemove.call(this, map);
            this._map.removeLayer(this.heat);
        },

        /**
         * Feature Managment Methods
         */

        createLayers: function(features) {
            for (var i = features.length - 1; i >= 0; i--) {
                var geojson = features[i];
                var id = geojson.id;
                var latlng = new L.LatLng(geojson.geometry.coordinates[1], geojson.geometry.coordinates[0]);
                this._cache[id] = latlng;

                // add the layer if it is within the time bounds or our layer is not time enabled
                if (!this._active[id] && (!this.options.timeField || (this.options.timeField && this._featureWithinTimeRange(geojson)))) {
                    this._active[id] = latlng;
                    this.heat._latlngs.push(latlng);
                }
            }

            this.heat.redraw();
        },

        addLayers: function(ids) {
            for (var i = ids.length - 1; i >= 0; i--) {
                var id = ids[i];
                if (!this._active[id]) {
                    var latlng = this._cache[id];
                    this.heat._latlngs.push(latlng);
                    this._active[id] = latlng;
                }
            }
            this.heat.redraw();
        },

        removeLayers: function(ids, permanent) {
            var newLatLngs = [];
            for (var i = ids.length - 1; i >= 0; i--) {
                var id = ids[i];
                if (this._active[id]) {
                    delete this._active[id];
                }
                if (this._cache[id] && permanent) {
                    delete this._cache[id];
                }
            }

            for (var latlng in this._active) {
                newLatLngs.push(this._active[latlng]);
            }

            this.heat.setLatLngs(newLatLngs);
        },

        setOptions: function(options) {
            this.heat.setOptions(options);
        },

        redraw: function() {
            this.heat.redraw();
        }

    });

    function featureLayer(options) {
        return new FeatureLayer(options);
    }

    exports.FeatureLayer = FeatureLayer;
    exports.featureLayer = featureLayer;
    exports['default'] = featureLayer;
    exports.VERSION = version;

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,